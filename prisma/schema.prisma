datasource db {
  provider = "postgresql"
  url      = "postgresql://user:password@postgres:5432/travel_fi"
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  active
  suspended
  banned
}

enum UserRole {
  user
  moderator
  admin
}

enum VoteType {
  upvote
  downvote
}

model User {
  id                Int        @id @default(autoincrement())
  email             String     @unique
  password          String?
  name              String?
  points            Int        @default(0)
  reputation        Int        @default(0)
  totalVotesReceived Int       @default(0)
  status            UserStatus @default(active)
  role              UserRole   @default(user)
  walletAddress     String?    @unique
  isAdmin           Boolean    @default(false)
  confirmedEmail    Boolean    @default(false)
  referralCode      String?    @unique
  pushEnabled       Boolean    @default(false)
  lastLocation      Json?
  language          String     @default("en")
  travelPreferences Json?
  badges            String[]   @default([])
  leaderboardRank   Int?
  profilePicture    String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relationships
  wifiPoints           WifiPoint[]
  reviews              Review[]
  securityReports      SecurityReport[]
  contributions        Contribution[]
  sessions             Session[]
  features             UserFeature[]
  achievements         Achievement[]
  votes                Vote[]
  auditLogs            AuditLog[]
  notifications        Notification[]
  pushSubscriptions    PushSubscription[]
  referredBy           ReferralSuggestion[] @relation("user")
  referredTo           ReferralSuggestion[] @relation("suggestedUser")
}

model UserFeature {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  feature   String // "unlimited_search", "offline_map"
  createdAt DateTime @default(now())
}

model Session {
  id        String   @id @default(uuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  userAgent String?
  ipAddress String?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model WifiPoint {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  // Геолокация
  lat Float
  lng Float

  // Основная информация
  ssid     String // Wi-Fi network name
  password String? // Опционально

  // Категоризация и фильтры
  tags           String[] // ["cafe", "free", "fast", "airport", "hotel", etc.]
  connectionType String   @default("Free") // "Free" | "Paid" | "Password-Protected"
  speed          String? // "Slow" | "Medium" | "Fast" (опционально)
  description    String? // До 500 символов, проверяется AI на токсичность

  // Модерация и статус
  status         String  @default("pending") // "pending" | "approved" | "rejected"
  moderationNote String? // Причина отклонения или комментарий модератора

  // Связи
  reviews         Review[]
  securityReports SecurityReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EsimTariff {
  id             Int      @id @default(autoincrement())
  provider       String // \"Airalo\"
  country        String
  countryCode    String
  data           Int // GB
  price          Float // USD
  isModerated    Boolean  @default(false)
  moderationNote String? // Rejection reason
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Contribution {
  id        Int             @id @default(autoincrement())
  userId    Int
  user      User            @relation(fields: [userId], references: [id])
  type      String // \"add_wifi\", \"update_esim\", \"security_report\"
  points    Int // Points awarded
  createdAt DateTime        @default(now())
  reportId  Int? // Добавлено
  report    SecurityReport? @relation(fields: [reportId], references: [id]) // Добавлено
}

model Review {
  id          Int        @id @default(autoincrement())
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  targetId    Int // `wifiPoint.id` or `esimTariff.id`
  targetType  String // \"wifi\" or \"esim\"
  rating      Int // 1-5
  comment     String?
  createdAt   DateTime   @default(now())
  WifiPoint   WifiPoint? @relation(fields: [wifiPointId], references: [id])
  wifiPointId Int?
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int? // кто совершил действие (null для системных/cron)
  user       User?    @relation(fields: [userId], references: [id])
  sessionId  String? // Session.id (uuid), для трассировки
  action     String // "user.role.update", "wifi.approve", "review.reject"
  targetType String // "User" | "WifiPoint" | "EsimTariff" | "Review" | "SecurityReport"
  targetId   Int? // id целевой сущности
  result     String // "success" | "failure"
  reason     String? // причина (отклонение/бан/комментарий)
  ipAddress  String?
  userAgent  String?
  metadata   Json? // краткие детали без PII
  createdAt  DateTime @default(now())

  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([targetType, targetId])
}

model SecurityReport {
  id            Int            @id @default(autoincrement())
  wifiPointId   Int
  wifiPoint     WifiPoint      @relation(fields: [wifiPointId], references: [id])
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  risks         String? // "MITM risk"
  rating        Int? // 1-5
  comment       String? // до 500 символов
  status        String         @default("pending")
  toxicityScore Float?
  createdAt     DateTime       @default(now())
  contributions Contribution[] // Добавлено
}

model Affiliate {
  id         Int      @id @default(autoincrement())
  provider   String // \"Airalo\"
  discount   Float // USD (5.0)
  travelCost Int // TRAVELFI (100)
  link       String // Affiliate URL
  createdAt  DateTime @default(now())
}

model ReferralSuggestion {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation("user", fields: [userId], references: [id])
  suggestedUserId Int
  suggestedUser   User     @relation("suggestedUser", fields: [suggestedUserId], references: [id])
  aiScore         Float // AI confidence
  createdAt       DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  type      String // \"wifi_nearby\", \"esim_promo\", \"security_alert\"
  content   String // \"New Wi-Fi at Cafe Paris\"
  read      Boolean  @default(false)
  action    String? // \"view_leaderboard\", \"add_wifi\"
  createdAt DateTime @default(now())
}

model PushSubscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  endpoint  String // Web Push endpoint
  keys      String // PushSubscriptionKeys
  createdAt DateTime @default(now())
}

model AdminSetting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Achievement {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  achievementId String   // ID из ACHIEVEMENTS
  points        Int      // Очки за достижение
  unlockedAt    DateTime @default(now())

  @@unique([userId, achievementId])
  @@index([userId])
}

model Vote {
  id         Int      @id @default(autoincrement())
  type       VoteType // upvote или downvote
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  targetType String   // "Review" | "SecurityReport" | "WifiPoint"
  targetId   Int
  createdAt  DateTime @default(now())

  @@unique([userId, targetType, targetId])
  @@index([userId])
  @@index([targetType, targetId])
}
